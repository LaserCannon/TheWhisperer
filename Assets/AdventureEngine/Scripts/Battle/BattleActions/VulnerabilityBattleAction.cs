using UnityEngine;
using System.Collections;
using System.Collections.Generic;
	

[System.Serializable]
public class VulnerabilityBattleAction : BaseBattleAction
{
	public float DamageOffset = 0f;
	public int KnockbackOffset = 0;
	public List<BreakRequirement> BreakReq;

}


[System.Serializable]
public class BreakRequirement
{
	public BreakType Type = BreakType.AttackCount;
	public int Amount;
	public DamageType DmgType = DamageType.None;
	
	//TODO: Consider making a DIFFERENT class that actually stores the state, rather than having the state and proto values in the same place. Same for VulnerabilityAction.
	private int curAmount = 0;		//NOT serialized
	public int CurrentAmount { get { return curAmount; } }
	
	public BreakRequirement()
	{
	}
	public BreakRequirement(BreakRequirement req)
	{
		Type = req.Type;
		Amount = req.Amount;
		DmgType = req.DmgType;
	}
	
	public bool IsReached
	{
		get { return Progress >= 1f; }
	}
	
	public float Progress
	{
		get { return Mathf.Clamp01((float)CurrentAmount/(float)Amount); }
	}
	
	public void HitWith(DamageType dmgType, int damage)
	{
		switch(Type)
		{
		case BreakType.AttackCount:
			curAmount += 1;
			break;
		case BreakType.Damage:
			curAmount += damage;
			break;
		case BreakType.DamageType:
			if(DmgType == DamageType.None || DmgType == dmgType)
				curAmount += 1;
			break;
		}
	}
	
	public void Reset()
	{
		curAmount = 0;
	}
}

[System.Serializable]
public class Vulnerability
{
	public float DamageOffset = 0f;
	public int KnockbackOffset = 0;
	public List<BreakRequirement> BreakReq;
	
	public static Vulnerability NewVulnerability(VulnerabilityBattleAction fromAction)
	{
		Vulnerability v = new Vulnerability();
		
		v.DamageOffset = fromAction.DamageOffset;
		v.KnockbackOffset = fromAction.KnockbackOffset;
		v.BreakReq = new List<BreakRequirement>();
		
		for(int i=0;i<fromAction.BreakReq.Count;i++)
		{
			v.BreakReq.Add(new BreakRequirement(fromAction.BreakReq[i]));
		}
		
		return v;
	}	
	
	public float PercentBroken()
	{
		float total = 0f;
		for(int i=0;i<BreakReq.Count;i++)
		{
			total += BreakReq[i].Progress;
		}
		return total/(float)BreakReq.Count;
	}
	
	public bool IsBroken()
	{
		return PercentBroken() >= 1f;
	}
	
	public void ResetVulnerability()
	{
		for(int i=0;i<BreakReq.Count;i++)
		{
			BreakReq[i].Reset();
		}
	}
}