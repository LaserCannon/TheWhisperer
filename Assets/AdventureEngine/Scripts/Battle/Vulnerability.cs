using UnityEngine;
using System.Collections;
using System.Collections.Generic;

[System.Serializable]
public class Vulnerability
{

	[SerializeField]
	private int damageOffset = 0;
	[SerializeField]
	private bool canBeKnockedDown = true;
	[SerializeField]
	private List<BreakRequirement> breakReq = new List<BreakRequirement>();


	public int DamageOffset
	{
		get { return damageOffset; }
#if UNITY_EDITOR
		set { damageOffset = value; }
#endif
	}
	public bool CanBeKnockedDown
	{
		get { return canBeKnockedDown; }
#if UNITY_EDITOR
		set { canBeKnockedDown = value; }
#endif
	}

#if UNITY_EDITOR
	public List<BreakRequirement> BreakReq
	{
		get { return breakReq; }
	}
#endif


	public bool IsBrokenBy(DamageType type, int damage)
	{
		for(int i=0;i<breakReq.Count;i++)
		{
			if(breakReq[i].IsBrokenBy(type,damage))
			{
				return true;
			}
		}
		return false;
	}
}



[System.Serializable]
public class BreakRequirement
{
	[SerializeField]
	private BreakType breakType = BreakType.Attack;
	[SerializeField]
	private int amount = 0;
	[SerializeField]
	private DamageType dmgType = DamageType.None;

	public BreakType Type
	{
		get { return breakType; }
		set { breakType = value; }
	}
	public int Amount
	{
		get { return amount; }
		set { amount = value; }
	}
	public DamageType DamageType
	{
		get { return dmgType; }
		set { dmgType = value; }
	}

	
	public bool IsBrokenBy(DamageType dtype, int damage)
	{
		bool broken = false;
		
		switch(breakType)
		{
		case BreakType.Attack:
			broken = true;
			break;
		case BreakType.Damage:
			broken = damage >= amount;
			break;
		case BreakType.DamageType:
			broken = dmgType == DamageType.None || dmgType == dtype;
			break;
		}
		
		return broken;
	}
	
}


